/* Generated By:JavaCC: Do not edit this line. CSAWQueryGrammar.java */
package iitb.CSAW.Query.Parser;

import java.util.ArrayList;
import java.util.List;

import iitb.CSAW.Query.IQuery;
import iitb.CSAW.Query.ContextQuery.Window;
import iitb.CSAW.Query.MatcherQuery.Exist;
import iitb.CSAW.Query.MatcherQuery;
import iitb.CSAW.Query.TokenLiteralQuery;
import iitb.CSAW.Query.AtomQuery;
import iitb.CSAW.Query.RootQuery;
import iitb.CSAW.Query.EntityLiteralQuery;
import iitb.CSAW.Query.TypeBindingQuery;
import iitb.CSAW.Query.PhraseQuery;
import iitb.CSAW.Query.ContextQuery;

/**
 * JavaCC class for parsing query strings to generate {@link RootQuery}.
 * Compiling this class creates the java code for the parser which is required by {@link QueryParser} 
 * @author devshree
 * @since 15 Nov 2010
 */
 @SuppressWarnings("all")
public class CSAWQueryGrammar implements CSAWQueryGrammarConstants {
        static int queryId = 0;

        static int numContextVars = 0;

  public static void main(String args []) throws ParseException
  {
    CSAWQueryGrammar cqg = new CSAWQueryGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      try
      {
        switch (cqg.start())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        CSAWQueryGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int start() throws ParseException {
        numContextVars = 0;
        RootQuery q;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OW:
    case UW:
      q = Query();
      jj_consume_token(23);
                System.out.println(q);
                {if (true) return 0;}
      break;
    case 23:
      jj_consume_token(23);
                {if (true) return 1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public RootQuery parse() throws ParseException {
  RootQuery q;
  numContextVars = 1;
    q = Query();
        {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  static final public RootQuery Query() throws ParseException {
  RootQuery q;
  List<ContextQuery > cqs = new ArrayList<ContextQuery >();
  ContextQuery cq;
    label_1:
    while (true) {
      cq = contextQuery();
                cqs.add(cq);
                numContextVars++;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OW:
      case UW:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
          q = new RootQuery(String.valueOf(queryId++));
          for(ContextQuery conq : cqs)
                        q.contexts.add(conq);
          {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  static final public ContextQuery contextQuery() throws ParseException {
  ContextQuery cq;
  Token slop;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UW:
      jj_consume_token(UW);
      jj_consume_token(CONBEG);
      slop = jj_consume_token(CONSTANT);
      cq = windowQuery(Window.unordered, Integer.parseInt(slop.toString()));
      jj_consume_token(CONEND);
      break;
    case OW:
      jj_consume_token(OW);
      jj_consume_token(CONBEG);
      slop = jj_consume_token(CONSTANT);
      cq = windowQuery(Window.ordered, Integer.parseInt(slop.toString()));
      jj_consume_token(CONEND);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return cq;}
    throw new Error("Missing return statement in function");
  }

  static final public ContextQuery windowQuery(Window w, int slop) throws ParseException {
        ContextQuery cq;
        List<MatcherQuery> ms = new ArrayList<MatcherQuery >();
        MatcherQuery mq;
    label_2:
    while (true) {
      mq = matcher();
                ms.add(mq);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPR:
      case QUOTE:
      case ENTBEG:
      case TYPBEG:
      case WORD:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
                cq = new ContextQuery("var"+numContextVars, w, slop);
                for(MatcherQuery q : ms)
                        cq.matchers.add(q);
                {if (true) return cq;}
    throw new Error("Missing return statement in function");
  }

  static final public MatcherQuery matcher() throws ParseException {
Exist e = Exist.may;
MatcherQuery aq;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPR:
      e = opr();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTBEG:
    case TYPBEG:
    case WORD:
      aq = atomMatcher(e);
      break;
    case QUOTE:
      jj_consume_token(QUOTE);
      aq = phraseMatcher(e);
      jj_consume_token(QUOTE);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return aq;}
    throw new Error("Missing return statement in function");
  }

  static final public PhraseQuery phraseMatcher(Exist e) throws ParseException {
  List<AtomQuery > atoms = new ArrayList<AtomQuery >();
  AtomQuery aq;
    label_3:
    while (true) {
      aq = atomMatcher(e);
                atoms.add(aq);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENTBEG:
      case TYPBEG:
      case WORD:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
    }
                PhraseQuery pq = new PhraseQuery(e);
                for(AtomQuery a: atoms)
                        pq.atoms.add(a);
                {if (true) return pq;}
    throw new Error("Missing return statement in function");
  }

  static final public AtomQuery atomMatcher(Exist e) throws ParseException {
  AtomQuery ca = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      ca = literal(e);
                {if (true) return ca;}
      break;
    case ENTBEG:
      ca = entity(e);
                {if (true) return ca;}
      break;
    case TYPBEG:
      ca = typebinding(e);
                {if (true) return ca;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public TokenLiteralQuery literal(Exist e) throws ParseException {
        Token token;
    token = jj_consume_token(WORD);
            e = (e !=null) ? e : Exist.may;
                {if (true) return new TokenLiteralQuery(token.toString(),e);}
    throw new Error("Missing return statement in function");
  }

  static final public EntityLiteralQuery entity(Exist e) throws ParseException {
        Token token;
    jj_consume_token(ENTBEG);
    token = jj_consume_token(WORD);
    jj_consume_token(ENTEND);
                e = (e !=null) ? e : Exist.may;
                {if (true) return new EntityLiteralQuery(token.toString(),e);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeBindingQuery typebinding(Exist e) throws ParseException {
        Token token;
    jj_consume_token(TYPBEG);
    token = jj_consume_token(WORD);
    jj_consume_token(TYPEND);
                if(e != Exist.must)
                {
                  // The type binding is always compulsory. Constraint is enforced in the constructor of TypeBindingQuery 
                        System.out.println("A type binding is always compulsory. Changing the Exist constraint from "+e+" to "+Exist.must+" for "+token.toString());
                }
                {if (true) return new TypeBindingQuery("var",token.toString());}
    throw new Error("Missing return statement in function");
  }

  static final public Exist opr() throws ParseException {
    token = jj_consume_token(OPR);
          if(token.toString().equals("+"))
                {if (true) return Exist.valueOf(Exist.class, "must");}
          else if(token.toString().equals("-"))
                {if (true) return Exist.valueOf(Exist.class, "not");}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CSAWQueryGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x830000,0x30000,0x30000,0x401510,0x10,0x401500,0x401400,0x401400,};
   }

  /** Constructor with InputStream. */
  public CSAWQueryGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CSAWQueryGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CSAWQueryGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CSAWQueryGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CSAWQueryGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CSAWQueryGrammar(CSAWQueryGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CSAWQueryGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
